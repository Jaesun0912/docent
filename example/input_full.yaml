data:
    input_path: '/path/to/input/test.cif'  # name / path for cif file(s)
    #input_path: '/path/to/input/'  # name / path for cif file(s)
    output_path: '/path/to/save'

calculator:
    calc_type: 'sevennet-batch'  # sevennet, sevennet-energy, sevennet-batch, custom
    calc_path: '7net-0'  # path of potential / if custom, *.py returning ase calculator
    calc_args:  # args pass to calculator, only for sevennet / sevennet-batch
        modal: 'mpa'
    # batch_size: 10  # only for sevennet batch calculator, set batch size
    avg_atom_num: 10  # only for sevennet batch calculator, set avg # of atoms in each batch


supercell:
    sanitize_cif_neutral:  # adjust occupation of cif to satisfy charge neutrality using lagrange multiplier
        attempt_tolerance: 0.01  # if abs(total charge) > attempt_tolerance, try sanitize
        relative_error: False  # Optional (default False), if given True, use relative error
        multiplicity_power: 2  # Optional (default 0), if value given, multiply (multiplicity**(value)) as loss weight
        #clip: 0.1 # Optiponal, if given float, clip adjustment above this value
    supercell_mode: 'auto'  # str, if 'auto', automatically generates, elif 'n1xn2xn3', generate n1 n2 n3 supercell (e.g. '2x2x3')
    supercell_unit: 'orbit' # str, 'orbit', 'site': if 'orbit', supercell is decided by how many orbit is required, while 'site' mode decide supercell by real atomic site
    # e.g., 4a site with {Mg: 0.5, Ca: 0.5} -> 1x1x1 cell is sufficient for 'site' mode (2 Mg, 2 Ca sites in original unit cell) while 'orbit' mode requires at least 1x1x2
    # 'orbit' mode is more realistic (especially in correlated disorder), while always requiring higher supercell multiplier (i.e. higher computational cost).
    supercell_criterion:  # default: {latt: {min: 1, max: 10}}
        latt:  # str, 'mul', 'latt', 'natom', 'entropy', 'permutation': # of total replication, # of replication in each lattice, # of atoms in cell, entropy, permutation
            min: 2
            max: 7
    supercell_selection: 'size'  # str, 'size', 'error', 'product': For possible supercell, select smallest supercell in size / error in occupation / product of the two 
    tolerance: 0.005  # tolerance of occupation. e.g. 0.005 means 0.5 ~ (0.495, 0.505). Reference of occupation is adjusted after sanitizing occupation for neutral (if using sanitization)
    positional_disorder:
        # if both hard_cutoff, element_cutoff given, bond length < max(1, multiplier*(r1+r2)) would be sampled
        hard_cutoff: 1.0  # Optional[float/int], use it as global cutoff radius (Angstrom)
        element_cutoff: 'cutoff.yaml'  # Optional[str], read radius of ions. see examples/elem_radii.{pkl, json, yaml}
        multiplier: 0.5  # for elemental cutoff, if (r1 + r2) * multiplier > bond length, gather it as the same orbit


monte_carlo:
    seed: 777  # random seed for monte carlo
    mc_method: 'population_annealing'  # 'parallel_tempering' (alias: 'pt', 'rxmc'), 'population_annealing' (alias 'pa')
    mc_params:
        n_replicas: 30  # int
        n_temperatures: 10  # int, number of sampled temperatures. overwritten by n_replicas in parallel tempering. or 'adaptive', (for pa) ends when reach t_low
        n_cycles: 100  # int, total number of cycles (mc steps + temperature swap), overwritten by n_temperatures in population annealing. or 'adaptive', (for pa) ends when reach t_low
        n_mc_steps: 100 # int, total number of Monte Carlo steps in each cycle
        t_low: 0.  # float, int or 'adaptive'
        t_high: 'inf'  # float, int, 'inf' or 'adaptive'
        mc_mode: 'exchange' # str, if exchange, exchange between two sites, elif permute, randomly permute one orbit
        t_schedule_mode: 'temperature'  # str, one of temperature (linear), beta (linear in beta), adaptive (adaptive), only used for pa
        pa_overlap: 0.7  # Optional, float, used for adaptive t_scheduling in pa and t_high = adaptive

    save:
        per_mc_step: 10  # Optional int, save replica as extxyz with every this steps
        per_cycle: 1  # Optional int, default 1, if per_mc_step given, set this as 1
        final_minima: 10  # Optional int, default 10, how many minimum structures to be saved 
